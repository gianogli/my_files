--- a/error.h
+++ b/error.h
@@ -18,14 +18,16 @@
 extern int quiet_mode;
 extern int use_syslog;

+extern unsigned int exit_code;
+
 /* Macros for logging/displaying status messages */
 #define PRINT(x...) { if (!quiet_mode) { fprintf(stderr, x); fprintf(stderr, "\n"); } }
 #define WARN(x...) { fprintf(stderr, "Warning: " x); fprintf(stderr, "\n"); }
 #define LOG(x...) { if (use_syslog) { openlog(PROG_NAME, LOG_PID, LOG_DAEMON); syslog(LOG_ERR, x); closelog(); } }
-#define DIE(x...) { fprintf(stderr, "Error: " x); fprintf(stderr, "\n"); raise(SIGINT); }
+#define DIE(e, x...) { fprintf(stderr, "Error: " x); fprintf(stderr, "\n"); exit_code = e; raise(SIGINT); }
 #define LOG_PRINT(x...) { LOG(x); PRINT(x); }
 #define LOG_WARN(x...) { LOG(x); WARN(x); }
-#define LOG_DIE(x...) { LOG(x); DIE(x); }
+#define LOG_DIE(e, x...) { LOG(x); DIE(e, x); }

 /* Assert macro for testing and debugging; use 'make debug'
    to compile the program with debugging features enabled */

--- a/format.c
+++ b/format.c
@@ -57,11 +57,11 @@

         len = strlen(str);
         if (len == 0)
-                LOG_DIE("Empty format string provided");
+                LOG_DIE(100, "Empty format string provided");

         /* Make a temporary copy of the string so we don't modify the original */
         if ((tmp = str_duplicate(str)) == NULL)
-                LOG_DIE("Cannot allocate memory for format string buffer");
+                LOG_DIE(101, "Cannot allocate memory for format string buffer");

         for (i = tmp; (name = strtok(i, ",")); i = NULL) {
                 /* Normalize input field text */
@@ -76,7 +76,7 @@
         free(tmp);

         if (num_nodes == 0)
-                LOG_DIE("No valid fields found in format string");
+                LOG_DIE(102, "No valid fields found in format string");

 #ifdef DEBUG
         int j, num_buckets = 0, num_chain, max_chain = 0;
@@ -115,7 +115,7 @@

         if ((node = get_field(name)) == NULL) {
                 if ((node = (FORMAT_NODE *) malloc(sizeof(FORMAT_NODE))) == NULL)
-                        LOG_DIE("Cannot allocate memory for new node");
+                        LOG_DIE(103, "Cannot allocate memory for new node");

                 hashval = hash_str(name, HASHSIZE);

@@ -131,7 +131,7 @@
         }

         if ((node->name = (char *) malloc(len + 1)) == NULL)
-                LOG_DIE("Cannot allocate memory for node name");
+                LOG_DIE(104, "Cannot allocate memory for node name");
         str_copy(node->name, name, len + 1);

         node->value = NULL;

--- a/httpry.c
+++ b/httpry.c
@@ -79,6 +79,8 @@
 static char rate_format[] = RATE_FORMAT;
 static char default_methods[] = DEFAULT_METHODS;

+unsigned int exit_code = 0;
+
 /* Find and prepare ethernet device for capturing */
 pcap_t *prepare_capture(char *interface, int promisc, char *filename, char *capfilter) {
         char errbuf[PCAP_ERRBUF_SIZE];
@@ -92,7 +94,7 @@
                 if (!interface) {
                         dev = pcap_lookupdev(errbuf);
                         if (dev == NULL)
-                                LOG_DIE("Cannot find a valid capture device: %s", errbuf);
+                                LOG_DIE(200, "Cannot find a valid capture device: %s", errbuf);
                 } else {
                         dev = interface;
                 }
@@ -102,23 +104,23 @@
                 pcap_hnd = pcap_open_live(dev, BUFSIZ, promisc, 1000, errbuf);

                 if (pcap_hnd == NULL)
-                        LOG_DIE("Cannot open live capture on '%s': %s", dev, errbuf);
+                        LOG_DIE(201, "Cannot open live capture on '%s': %s", dev, errbuf);
         } else {
                 /* Reading from a saved capture, so open file */
                 pcap_hnd = pcap_open_offline(filename, errbuf);

                 if (pcap_hnd == NULL)
-                        LOG_DIE("Cannot open saved capture file: %s", errbuf);
+                        LOG_DIE(202, "Cannot open saved capture file: %s", errbuf);
         }

         set_link_offset(pcap_datalink(pcap_hnd));

         /* Compile capture filter and apply to handle */
         if (pcap_compile(pcap_hnd, &filter, capfilter, 0, net) == -1)
-                LOG_DIE("Cannot compile capture filter '%s': %s", capfilter, pcap_geterr(pcap_hnd));
+                LOG_DIE(203, "Cannot compile capture filter '%s': %s", capfilter, pcap_geterr(pcap_hnd));

         if (pcap_setfilter(pcap_hnd, &filter) == -1)
-                LOG_DIE("Cannot apply capture filter: %s", pcap_geterr(pcap_hnd));
+                LOG_DIE(204, "Cannot apply capture filter: %s", pcap_geterr(pcap_hnd));

         pcap_freecode(&filter);

@@ -169,7 +171,7 @@
                         link_offset = 8;
                         break;
                 default:
-                        LOG_DIE("Unsupported datalink type: %s", pcap_datalink_val_to_name(header_type));
+                        LOG_DIE(205, "Unsupported datalink type: %s", pcap_datalink_val_to_name(header_type));
                         break;
         }

@@ -184,7 +186,7 @@
                         LOG_WARN("Output file path is not absolute and may be inaccessible after daemonizing");

                 if (freopen(use_outfile, "a", stdout) == NULL)
-                        LOG_DIE("Cannot reopen output stream to '%s'", use_outfile);
+                        LOG_DIE(206, "Cannot reopen output stream to '%s'", use_outfile);

                 PRINT("Writing output to file: %s", use_outfile);

@@ -198,7 +200,7 @@
                         LOG_WARN("Binary capture file path is not absolute and may be inaccessible after daemonizing");

                 if ((dumpfile = pcap_dump_open(pcap_hnd, use_dumpfile)) == NULL)
-                        LOG_DIE("Cannot open binary dump file '%s'", use_dumpfile);
+                        LOG_DIE(207, "Cannot open binary dump file '%s'", use_dumpfile);
                 PRINT("Writing binary dump file: %s", use_dumpfile);
         }

@@ -215,14 +217,14 @@
         fflush(NULL);

         child_pid = fork();
-        if (child_pid < 0) LOG_DIE("Cannot fork child process");
+        if (child_pid < 0) LOG_DIE(208, "Cannot fork child process");
         if (child_pid > 0) exit(0); /* Parent bows out */

         /* Configure default output streams */
         dup2(1,2);
         close(0);
         if (freopen(NULL_FILE, "a", stderr) == NULL)
-                LOG_DIE("Cannot reopen stderr to '%s'", NULL_FILE);
+                LOG_DIE(209, "Cannot reopen stderr to '%s'", NULL_FILE);

         /* Assign new process group for child */
         if (setsid() == -1)
@@ -230,7 +232,7 @@

         umask(022); /* Reset file creation mask */
         if (chdir("/") == -1)
-                LOG_DIE("Cannot change run directory to '/'");
+                LOG_DIE(210, "Cannot change run directory to '/'");

         /* Create PID file */
         if (pid_filename[0] != '/')
@@ -262,10 +264,10 @@
 #endif

         if ((getuid() != 0) && (geteuid() != 0))
-                LOG_DIE("You must be root to switch users");
+                LOG_DIE(211, "You must be root to switch users");

         if (!(user = getpwnam(name)))
-                LOG_DIE("User '%s' not found in system", name);
+                LOG_DIE(212, "User '%s' not found in system", name);

         /* Change ownership of output files before we drop privs */
         if (use_outfile) {
@@ -279,14 +281,14 @@
         }

         if (initgroups(name, user->pw_gid))
-                LOG_DIE("Cannot initialize the group access list");
+                LOG_DIE(213, "Cannot initialize the group access list");

-        if (setgid(user->pw_gid)) LOG_DIE("Cannot set GID");
-        if (setuid(user->pw_uid)) LOG_DIE("Cannot set UID");
+        if (setgid(user->pw_gid)) LOG_DIE(214, "Cannot set GID");
+        if (setuid(user->pw_uid)) LOG_DIE(215, "Cannot set UID");

         /* Test to see if we actually made it to the new user */
         if ((getegid() != user->pw_gid) || (geteuid() != user->pw_uid))
-                LOG_DIE("Cannot change process owner to '%s'", name);
+                LOG_DIE(216, "Cannot change process owner to '%s'", name);

         return;
 }
@@ -578,7 +580,8 @@
                         return;
         }

-        exit(sig);
+        /* exit(sig); */
+        exit(exit_code);
 }

 /* Perform end of run tasks and prepare to exit gracefully */
@@ -711,16 +714,16 @@
         display_banner();

         if (daemon_mode && !use_outfile)
-                LOG_DIE("Daemon mode requires an output file");
+                LOG_DIE(217, "Daemon mode requires an output file");

         if (parse_count < 0)
-                LOG_DIE("Invalid -n value, must be 0 or greater");
+                LOG_DIE(218, "Invalid -n value, must be 0 or greater");

         if (rate_interval < 1)
-                LOG_DIE("Invalid -t value, must be 1 or greater");
+                LOG_DIE(219, "Invalid -t value, must be 1 or greater");

         if (rate_threshold < 1)
-                LOG_DIE("Invalid -l value, must be 1 or greater");
+                LOG_DIE(220, "Invalid -l value, must be 1 or greater");

         if (argv[optind] && *(argv[optind])) {
                 capfilter = argv[optind];
@@ -750,7 +753,7 @@
         if (new_user) change_user(new_user);

         if ((buf = malloc(BUFSIZ + 1)) == NULL)
-                LOG_DIE("Cannot allocate memory for packet data buffer");
+                LOG_DIE(221, "Cannot allocate memory for packet data buffer");

         if (rate_stats)
                 init_rate_stats(rate_interval, use_infile, rate_threshold);
@@ -758,7 +761,7 @@
         start_time = time(0);
         loop_status = pcap_loop(pcap_hnd, -1, &parse_http_packet, NULL);
         if (loop_status == -1) {
-                LOG_DIE("Problem reading packets from interface: %s", pcap_geterr(pcap_hnd));
+                LOG_DIE(222, "Problem reading packets from interface: %s", pcap_geterr(pcap_hnd));
         } else if (loop_status == -2) {
                 PRINT("Loop halted, shutting down...");
         }

--- a/methods.c
+++ b/methods.c
@@ -51,11 +51,11 @@
 #endif
         len = strlen(str);
         if (len == 0)
-                LOG_DIE("Empty methods string provided");
+                LOG_DIE(300, "Empty methods string provided");

         /* Make a temporary copy of the string so we don't modify the original */
         if ((tmp = str_duplicate(str)) == NULL)
-                LOG_DIE("Cannot allocate memory for methods string buffer");
+                LOG_DIE(301, "Cannot allocate memory for methods string buffer");

         for (i = tmp; (method = strtok(i, ",")); i = NULL) {
                 method = str_strip_whitespace(method);
@@ -69,7 +69,7 @@
         free(tmp);

         if (num_methods == 0)
-                LOG_DIE("No valid methods found in string");
+                LOG_DIE(302, "No valid methods found in string");

         return;
 }
@@ -98,11 +98,11 @@
         }

         if ((*node = (METHOD_NODE *) malloc(sizeof(METHOD_NODE))) == NULL) {
-                LOG_DIE("Cannot allocate memory for method node");
+                LOG_DIE(303, "Cannot allocate memory for method node");
         }

         if (((*node)->method = (char *) malloc(len + 1)) == NULL) {
-                LOG_DIE("Cannot allocate memory for method string");
+                LOG_DIE(304, "Cannot allocate memory for method string");
         }
         str_copy((*node)->method, method, len + 1);


--- a/rate.c
+++ b/rate.c
@@ -65,7 +65,7 @@

         /* Allocate host stats hash array */
         if ((stats = (struct host_stats **) calloc(HASHSIZE, sizeof(struct host_stats *))) == NULL)
-                LOG_DIE("Cannot allocate memory for host stats");
+                LOG_DIE(400, "Cannot allocate memory for host stats");

         if (!use_infile)
                 create_rate_stats_thread(rate_interval, use_infile, rate_threshold);
@@ -90,19 +90,19 @@

         s = pthread_mutex_init(&stats_lock, NULL);
         if (s != 0)
-                LOG_DIE("Statistics thread mutex initialization failed with error %d", s);
+                LOG_DIE(401, "Statistics thread mutex initialization failed with error %d", s);

         s = pthread_sigmask(SIG_BLOCK, &set, NULL);
         if (s != 0)
-                LOG_DIE("Statistics thread signal blocking failed with error %d", s);
+                LOG_DIE(402, "Statistics thread signal blocking failed with error %d", s);

         s = pthread_create(&thread, NULL, run_stats, (void *) &thread_args);
         if (s != 0)
-                LOG_DIE("Statistics thread creation failed with error %d", s);
+                LOG_DIE(403, "Statistics thread creation failed with error %d", s);

         s = pthread_sigmask(SIG_UNBLOCK, &set, NULL);
         if (s != 0)
-                LOG_DIE("Statistics thread signal unblocking failed with error %d", s);
+                LOG_DIE(404, "Statistics thread signal unblocking failed with error %d", s);

         thread_created = 1;

@@ -371,13 +371,13 @@
                 }
         } else { /* Out of nodes, allocate a new block */
                 if ((block = (struct host_stats *) malloc(NODE_BLOCKSIZE * sizeof(struct host_stats))) == NULL) {
-                        LOG_DIE("Cannot allocate memory for node block");
+                        LOG_DIE(405, "Cannot allocate memory for node block");
                 }

                 /* Store pointer to allocated block so we can free it later */
                 if (block_alloc == NULL) {
                         if ((block_alloc = (struct host_stats **) malloc(NODE_ALLOC_BLOCKSIZE * sizeof(struct host_stats *))) == NULL) {
-                                LOG_DIE("Cannot allocate memory for blocks array");
+                                LOG_DIE(406, "Cannot allocate memory for blocks array");
                         }

                         mv = block_alloc;
@@ -388,7 +388,7 @@
                 if (++alloc_size % NODE_ALLOC_BLOCKSIZE == 0) {
                         tmp = realloc(block_alloc, ((alloc_size + NODE_ALLOC_BLOCKSIZE) * sizeof(struct host_stats *)));
                         if (tmp == NULL) {
-                                LOG_DIE("Cannot re-allocate memory for blocks array");
+                                LOG_DIE(407, "Cannot re-allocate memory for blocks array");
                         }
                         block_alloc = tmp;
                         mv = block_alloc + alloc_size - 1;
